Exercice 1 :
Debut
    # DÃ©finir une fonction `saisie_fonction_logique` qui contenantðŸ”° :
        - nombre_variables <- Demande Ã  l'utilisateur le nombre de variables et. [exemple: 3]
        - fonction_logique <- Demande Ã  l'utilisateur la fonction logique. [exemple: (a and b) or (not b and c) or (a and not c)]
    # DÃ©finir une fonction `verite` qui prend en paramÃ¨tres le nombre de variables et la fonction logique dont on aðŸ”° :
        - tableau de vÃ©ritÃ© avec :
            - header <- GÃ©nÃ©rer l'en-tÃªte de la table de vÃ©ritÃ©.
            - Pour chaque combinaison de valeurs de vÃ©ritÃ© possibles :
                - fX <- Ã‰valuer la fonction logique pour ces valeurs.
                - row <- Afficher la ligne de la table de vÃ©ritÃ© correspondante.
        - Calculer les formes canoniques dont :
            - si fX <- true ou 1 alors ajouter le valeur de fX dans form_canonique_1
            - sinon alors ajouter le valeur de fX dans form_canonique_2
        - Appeler la fonction `operator` pour afficher les opÃ©rations logiques.
        - Afficher les rÃ©sultats des formes canoniques.
    # DÃ©finir une fonction `generate_truth_values` qui :
        - gÃ©nÃ¨re toutes les combinaisons possibles de valeurs de vÃ©ritÃ© pour un nombre donnÃ© de variables.
    # DÃ©finir une fonction `operator` qui prend en paramÃ¨tre le nombre de variablesðŸ”° :
        - si nombre_variables <- 2 alors : afficher simplement ab et Â¬ba
        - sinon si nombre_variables <- 3 alors : afficher ab, Â¬bc et aÂ¬c
        - sinon n'affiche rien
    # Appeler la fonction `saisie_fonction_logique` pour obtenir le nombre de variables et la fonction logique.
    # Appeler la fonction `verite` avec le nombre de variables et la fonction logique obtenus.
    # 
Fin

Cet algorithme permet de saisir une fonction logique, de gÃ©nÃ©rer sa table de vÃ©ritÃ©, de calculer ses formes canoniques et d'afficher les opÃ©rations logiques correspondantes.